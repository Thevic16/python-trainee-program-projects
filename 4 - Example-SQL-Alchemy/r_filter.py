from sqlalchemy import Column, Integer, String, and_, or_
from sqlalchemy import create_engine

engine = create_engine('sqlite:///sales.db', echo=True)
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()


class Customers(Base):
    __tablename__ = 'customers'

    id = Column(Integer, primary_key=True)
    name = Column(String)

    address = Column(String)
    email = Column(String)


from sqlalchemy.orm import sessionmaker

Session = sessionmaker(bind=engine)
session = Session()
# result = session.query(Customers).filter(Customers.id > 2)
result = session.query(Customers).filter(Customers.id == 2)
# result = session.query(Customers).filter(Customers.id != 2)
# result = session.query(Customers).filter(Customers.name.like('Ra%'))
# result = session.query(Customers).filter(Customers.id.in_([1,3]))
'''
AND
This conjunction is generated by either putting multiple commas separated 
criteria in the filter or using and_() method as given below âˆ’
'''
# result = session.query(Customers).filter(Customers.id>2, Customers.name.like('Ra%'))
# result = session.query(Customers).filter(and_(Customers.id>2, Customers.name.like('Ra%')))
#result = session.query(Customers).filter(or_(Customers.id>2, Customers.name.like('Ra%')))


for row in result:
    print("ID:", row.id, "Name: ", row.name, "Address:", row.address, "Email:",
          row.email)
